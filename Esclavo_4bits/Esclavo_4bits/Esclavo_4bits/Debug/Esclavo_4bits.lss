
Esclavo_4bits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001fe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000992  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000592  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025a  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  9e:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Slave_Init>:
//*****************************************************************************
// Funcion para inicializar I2C Esclavo
//*****************************************************************************

void I2C_Slave_Init(uint8_t address) {
    DDRC &= ~((1<<DDC4)|(1<<DDC5));  // Pines de I2C como entradas
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	9f 7c       	andi	r25, 0xCF	; 207
  aa:	97 b9       	out	0x07, r25	; 7

    TWAR = address << 1;  // Se asigna la direccion que tendra
  ac:	88 0f       	add	r24, r24
  ae:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    // TWAR = (address << 1 | 0x01);  // Se asigna la direccion que tendra y habilita llamada gen

    // Se habilita la interfaz, ACK automático, se habilita la ISR
    TWCR = (1<<TWEA) | (1<<TWEN) | (1<<TWIE);
  b2:	85 e4       	ldi	r24, 0x45	; 69
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	08 95       	ret

000000ba <setup_ports>:
volatile uint8_t counter = 0;
uint8_t buffer = 0;

void setup_ports() {
	// Configurar PB4-PB1 como salidas para LEDs
	DDRB |= (1 << PB4) | (1 << PB3) | (1 << PB2) | (1 << PB1);
  ba:	84 b1       	in	r24, 0x04	; 4
  bc:	8e 61       	ori	r24, 0x1E	; 30
  be:	84 b9       	out	0x04, r24	; 4
	
	// Configurar PD2 y PD3 como entradas con pull-up (botones)
	DDRD &= ~((1 << PD2) | (1 << PD3));
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	83 7f       	andi	r24, 0xF3	; 243
  c4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PD2) | (1 << PD3);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8c 60       	ori	r24, 0x0C	; 12
  ca:	8b b9       	out	0x0b, r24	; 11
	I2C_Slave_Init(SLAVE_ADDRESS);
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Slave_Init>
	sei();
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <__vector_24>:
}

ISR(TWI_vect) {
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	uint8_t estado = TWSR & 0xF8;  // Máscara correcta para estados I2C
  e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ea:	88 7f       	andi	r24, 0xF8	; 248
	
	switch(estado) {
  ec:	80 39       	cpi	r24, 0x90	; 144
  ee:	a9 f0       	breq	.+42     	; 0x11a <__vector_24+0x44>
  f0:	38 f4       	brcc	.+14     	; 0x100 <__vector_24+0x2a>
  f2:	80 37       	cpi	r24, 0x70	; 112
  f4:	61 f0       	breq	.+24     	; 0x10e <__vector_24+0x38>
  f6:	80 38       	cpi	r24, 0x80	; 128
  f8:	81 f0       	breq	.+32     	; 0x11a <__vector_24+0x44>
  fa:	80 36       	cpi	r24, 0x60	; 96
  fc:	71 f5       	brne	.+92     	; 0x15a <__vector_24+0x84>
  fe:	07 c0       	rjmp	.+14     	; 0x10e <__vector_24+0x38>
 100:	88 3b       	cpi	r24, 0xB8	; 184
 102:	d9 f0       	breq	.+54     	; 0x13a <__vector_24+0x64>
 104:	80 3c       	cpi	r24, 0xC0	; 192
 106:	19 f1       	breq	.+70     	; 0x14e <__vector_24+0x78>
 108:	88 3a       	cpi	r24, 0xA8	; 168
 10a:	39 f5       	brne	.+78     	; 0x15a <__vector_24+0x84>
 10c:	0c c0       	rjmp	.+24     	; 0x126 <__vector_24+0x50>
		// Escritura (maestro -> esclavo)
		case 0x60: // SLA+W recibido, ACK enviado
		case 0x70: // GENERAL CALL recibido, ACK enviado
		TWCR |= (1 << TWINT) | (1 << TWEA); // ACK y limpia bandera
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 6c       	ori	r24, 0xC0	; 192
 116:	80 83       	st	Z, r24
		break;
 118:	25 c0       	rjmp	.+74     	; 0x164 <__vector_24+0x8e>
		
		case 0x80: // Dato recibido, ACK enviado
		case 0x90: // Dato recibido después de GENERAL CALL
		//i2c_reg_addr = TWDR; // Guarda la dirección del registro solicitado
		TWCR |= (1 << TWINT) | (1 << TWEA); // ACK y limpia bandera
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 6c       	ori	r24, 0xC0	; 192
 122:	80 83       	st	Z, r24
		break;
 124:	1f c0       	rjmp	.+62     	; 0x164 <__vector_24+0x8e>
		
		// Lectura (esclavo -> maestro)
		case 0xA8: // SLA+R recibido, ACK enviado
		TWDR = counter; // Carga dato a enviar
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEA); // Envía dato
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 6c       	ori	r24, 0xC0	; 192
 136:	80 83       	st	Z, r24
		break;
 138:	15 c0       	rjmp	.+42     	; 0x164 <__vector_24+0x8e>
		
		case 0xB8: // Dato transmitido, ACK recibido
		//i2c_reg_addr++; // Incrementa registro automático (opcional)
		TWDR = counter; // Carga siguiente dato
 13a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 13e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR |= (1 << TWINT) | (1 << TWEA); // Envía dato
 142:	ec eb       	ldi	r30, 0xBC	; 188
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 6c       	ori	r24, 0xC0	; 192
 14a:	80 83       	st	Z, r24
		break;
 14c:	0b c0       	rjmp	.+22     	; 0x164 <__vector_24+0x8e>
		
		case 0xC0: // Dato transmitido, NACK recibido (fin de transmisión)
		TWCR |= (1 << TWINT); // Solo limpia bandera
 14e:	ec eb       	ldi	r30, 0xBC	; 188
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
		break;
 158:	05 c0       	rjmp	.+10     	; 0x164 <__vector_24+0x8e>
		
		// Manejo de errores
		case 0x00: // Bus error
		default:
		TWCR |= (1 << TWINT) | (1 << TWSTO); // Libera el bus
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 69       	ori	r24, 0x90	; 144
 162:	80 83       	st	Z, r24
		break;
	}
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <check_buttons>:

void check_buttons() {
	static uint8_t last_state = 0xFF;
	uint8_t current_state = PIND & ((1 << PD2) | (1 << PD3)); // Estados de PD2 y PD3
 174:	29 b1       	in	r18, 0x09	; 9
 176:	2c 70       	andi	r18, 0x0C	; 12

	if (current_state != last_state) {  // Si hubo cambio
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17c:	28 17       	cp	r18, r24
 17e:	89 f1       	breq	.+98     	; 0x1e2 <check_buttons+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	3f ef       	ldi	r19, 0xFF	; 255
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	31 50       	subi	r19, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <check_buttons+0x12>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <check_buttons+0x1c>
 190:	00 00       	nop
		_delay_ms(20);  // Anti-rebote (20ms)

		// Lógica de botones:
		if (!(PIND & (1 << PD2))) {  // Botón PD2 presionado (LOW)
 192:	4a 99       	sbic	0x09, 2	; 9
 194:	0b c0       	rjmp	.+22     	; 0x1ac <check_buttons+0x38>
			counter = (counter < 15) ? counter + 1 : 15;  // Incrementa (máx. 15)
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 19a:	8f 30       	cpi	r24, 0x0F	; 15
 19c:	20 f4       	brcc	.+8      	; 0x1a6 <check_buttons+0x32>
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <check_buttons+0x34>
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
		if (!(PIND & (1 << PD3))) {  // Botón PD3 presionado (LOW)
 1ac:	4b 99       	sbic	0x09, 3	; 9
 1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <check_buttons+0x52>
			counter = (counter > 0) ? counter - 1 : 0;    // Decrementa (mín. 0)
 1b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1b4:	88 23       	and	r24, r24
 1b6:	21 f0       	breq	.+8      	; 0x1c0 <check_buttons+0x4c>
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <check_buttons+0x4e>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}

		// Actualiza LEDs (PB4-PB1):
		PORTB = (PORTB & 0xE0) | ((counter & 0x0F) << 1);
 1c6:	35 b1       	in	r19, 0x05	; 5
 1c8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 1cc:	9f 70       	andi	r25, 0x0F	; 15
 1ce:	89 2f       	mov	r24, r25
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	93 2f       	mov	r25, r19
 1d8:	90 7e       	andi	r25, 0xE0	; 224
 1da:	89 2b       	or	r24, r25
 1dc:	85 b9       	out	0x05, r24	; 5
		last_state = current_state;  // Guarda el nuevo estado
 1de:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	08 95       	ret

000001e4 <main>:
	}
}

int main() {
	setup_ports();
 1e4:	0e 94 5d 00 	call	0xba	; 0xba <setup_ports>
	
	while(1) {
		check_buttons();
 1e8:	0e 94 ba 00 	call	0x174	; 0x174 <check_buttons>
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	9c e9       	ldi	r25, 0x9C	; 156
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xc>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x12>
 1f6:	00 00       	nop
 1f8:	f7 cf       	rjmp	.-18     	; 0x1e8 <main+0x4>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
