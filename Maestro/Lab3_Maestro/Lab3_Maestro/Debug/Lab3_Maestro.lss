
Lab3_Maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000055e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  000005fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012dc  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a93  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000865  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000551  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ea  00000000  00000000  00003439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003c23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  9e:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:

#include "I2C.h"
//***************************************************************
// Funcion para inicializar I2C Maestro
//***************************************************************
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler) {
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	8b 01       	movw	r16, r22
  ae:	9c 01       	movw	r18, r24
  b0:	c4 2f       	mov	r28, r20

    DDRC &= ~((1 << DDC4) | (1 << DDC5));  // Pines de I2C como entradas
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8f 7c       	andi	r24, 0xCF	; 207
  b6:	87 b9       	out	0x07, r24	; 7

    switch (Prescaler) {
  b8:	44 30       	cpi	r20, 0x04	; 4
  ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
  c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
  c4:	40 31       	cpi	r20, 0x10	; 16
  c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
  c8:	40 34       	cpi	r20, 0x40	; 64
  ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
  cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
        case 1:
            TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
  ce:	e9 eb       	ldi	r30, 0xB9	; 185
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	80 83       	st	Z, r24
            break;
  d8:	1e c0       	rjmp	.+60     	; 0x116 <I2C_Master_Init+0x70>
        case 4:
            TWSR &= ~(1 << TWPS1);
  da:	e9 eb       	ldi	r30, 0xB9	; 185
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS0);
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
            break;
  ea:	15 c0       	rjmp	.+42     	; 0x116 <I2C_Master_Init+0x70>
        case 16:
            TWSR &= ~(1 << TWPS0);
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS1);
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
            break;
  fc:	0c c0       	rjmp	.+24     	; 0x116 <I2C_Master_Init+0x70>
        case 64:
            TWSR |= (1 << TWPS1) | (1 << TWPS0);
  fe:	e9 eb       	ldi	r30, 0xB9	; 185
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	83 60       	ori	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
            break;
 108:	06 c0       	rjmp	.+12     	; 0x116 <I2C_Master_Init+0x70>
		default:
			TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
 10a:	e9 eb       	ldi	r30, 0xB9	; 185
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
			Prescaler=1;
 114:	c1 e0       	ldi	r28, 0x01	; 1
			break;

    }
	TWBR = (((16000000)/SCL_Clock)-16)/(2*Prescaler); //Debe ser mayor a 10 para operar de forma estable
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	74 e2       	ldi	r23, 0x24	; 36
 11a:	84 ef       	ldi	r24, 0xF4	; 244
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	a9 01       	movw	r20, r18
 120:	98 01       	movw	r18, r16
 122:	0e 94 56 02 	call	0x4ac	; 0x4ac <__udivmodsi4>
 126:	ca 01       	movw	r24, r20
 128:	b9 01       	movw	r22, r18
 12a:	60 51       	subi	r22, 0x10	; 16
 12c:	71 09       	sbc	r23, r1
 12e:	81 09       	sbc	r24, r1
 130:	91 09       	sbc	r25, r1
 132:	4c 2f       	mov	r20, r28
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	9a 01       	movw	r18, r20
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	03 2e       	mov	r0, r19
 13e:	00 0c       	add	r0, r0
 140:	44 0b       	sbc	r20, r20
 142:	55 0b       	sbc	r21, r21
 144:	0e 94 56 02 	call	0x4ac	; 0x4ac <__udivmodsi4>
 148:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1<<TWEN);
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	84 60       	ori	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
}
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <I2C_Master_Start>:
// Funcion de inicio de la comunicacion I2C
//************************************************************************
void I2C_Master_Start(void){
    //uint8_t estado;
    
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Iniciar condición de start
 15e:	84 ea       	ldi	r24, 0xA4	; 164
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while(!(TWCR & (1<<TWINT))); // Espera a que termine la flag TWINT
 164:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 168:	88 23       	and	r24, r24
 16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_Master_Start+0x6>

}
 16c:	08 95       	ret

0000016e <I2C_Master_Stop>:

//************************************************************************
// Funcion de parada de la comunicacion I2C
//************************************************************************
void I2C_Master_Stop(void){
    TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWSTO); // Inicia el envío secuencia parada STOP
 16e:	84 e9       	ldi	r24, 0x94	; 148
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	08 95       	ret

00000176 <I2C_Master_Write>:
// el dato
//************************************************************************
uint8_t I2C_Master_Write(uint8_t dato){
    uint8_t estado;

    TWDR = dato;  // Cargar el dato
 176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWEN) | (1<<TWINT); // Inicia el envío
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while(!(TWCR & (1<<TWINT))); // Espera al flag TWINT
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <I2C_Master_Write+0xa>

    estado = TWSR & 0xF8; // Verificar estado
 188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18c:	88 7f       	andi	r24, 0xF8	; 248

    // Verificar si se transmitió una SLA + W con ACK, SLA + R con ACK, o un Dato con ACK
    if(estado == 0x18 || estado == 0x28 || estado == 0x40){
 18e:	88 31       	cpi	r24, 0x18	; 24
 190:	31 f0       	breq	.+12     	; 0x19e <I2C_Master_Write+0x28>
 192:	88 32       	cpi	r24, 0x28	; 40
 194:	31 f0       	breq	.+12     	; 0x1a2 <I2C_Master_Write+0x2c>
 196:	80 34       	cpi	r24, 0x40	; 64
 198:	29 f4       	brne	.+10     	; 0x1a4 <I2C_Master_Write+0x2e>
        return 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	08 95       	ret
 1a2:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return estado;
    }
}
 1a4:	08 95       	ret

000001a6 <I2C_Master_Read>:

//************************************************************************
// Función de recepción de datos enviados por el esclavo al maestro
// Esta función es para leer los datos que están en el esclavo
//************************************************************************
uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
 1a6:	dc 01       	movw	r26, r24
    uint8_t estado;
    
    if(ack){
 1a8:	66 23       	and	r22, r22
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <I2C_Master_Read+0x12>
        TWCR |= (1<<TWEA);  // Lectura con ACK
 1ac:	ec eb       	ldi	r30, 0xBC	; 188
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	90 81       	ld	r25, Z
 1b2:	90 64       	ori	r25, 0x40	; 64
 1b4:	90 83       	st	Z, r25
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <I2C_Master_Read+0x1c>
    }else{
        TWCR &= ~(1<<TWEA); // Lectura sin ACK
 1b8:	ec eb       	ldi	r30, 0xBC	; 188
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	90 81       	ld	r25, Z
 1be:	9f 7b       	andi	r25, 0xBF	; 191
 1c0:	90 83       	st	Z, r25
    }

    TWCR |= (1<<TWINT); // Iniciamos la lectura
 1c2:	ec eb       	ldi	r30, 0xBC	; 188
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	90 81       	ld	r25, Z
 1c8:	90 68       	ori	r25, 0x80	; 128
 1ca:	90 83       	st	Z, r25
    while(!(TWCR & (1<<TWINT))); // Espera al flag TWINT
 1cc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	99 23       	and	r25, r25
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <I2C_Master_Read+0x26>

    estado = TWSR & 0xF8; // Verificar estado
 1d4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1d8:	98 7f       	andi	r25, 0xF8	; 248

    // Verificar dato leído con ACK o sin ACK
    if(estado == 0x58 || estado == 0x50){
 1da:	98 35       	cpi	r25, 0x58	; 88
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <I2C_Master_Read+0x3c>
 1de:	90 35       	cpi	r25, 0x50	; 80
 1e0:	29 f4       	brne	.+10     	; 0x1ec <I2C_Master_Read+0x46>
        *buffer = TWDR;
 1e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1e6:	8c 93       	st	X, r24
        return 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	08 95       	ret
    }else{
        return estado;
 1ec:	89 2f       	mov	r24, r25
    }
}
 1ee:	08 95       	ret

000001f0 <lcd_pulse_enable>:
#include <util/delay.h>
#include "LCD.h"

// Pulso de habilitación
void lcd_pulse_enable(void) {
	LCD_CTRL_PORT |= (1 << LCD_E);   // E = 1
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	8a 95       	dec	r24
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_pulse_enable+0x8>
 1fc:	00 00       	nop
	_delay_us(1);                    // Pulso mínimo
	LCD_CTRL_PORT &= ~(1 << LCD_E);  // E = 0
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	8d 7f       	andi	r24, 0xFD	; 253
 202:	88 b9       	out	0x08, r24	; 8
 204:	87 ec       	ldi	r24, 0xC7	; 199
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_pulse_enable+0x18>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd_pulse_enable+0x1e>
 20e:	00 00       	nop
 210:	08 95       	ret

00000212 <lcd_send_data>:
	
	// Distribuir los datos
	PORTD |= (data & 0xF0);        // Bits 7,6,5,4 van a PORTD
	PORTB |= (data & 0x0F);        // Bits 3,2,1,0 van a PORTB
	*/
	PORTD = 0x00;
 212:	1b b8       	out	0x0b, r1	; 11
	PORTD = data;
 214:	8b b9       	out	0x0b, r24	; 11
 216:	08 95       	ret

00000218 <lcd_command>:
	_delay_us(50);                   // Tiempo de setup
}

// Enviar comando a la LCD
void lcd_command(uint8_t cmd) {
	LCD_CTRL_PORT &= ~(1 << LCD_RS); // RS = 0 para comando
 218:	98 b1       	in	r25, 0x08	; 8
 21a:	9e 7f       	andi	r25, 0xFE	; 254
 21c:	98 b9       	out	0x08, r25	; 8
	lcd_send_data(cmd);             // Colocar comando en puerto de datos
 21e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_send_data>
	lcd_pulse_enable();              // Generar pulso Enable
 222:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_pulse_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9f e1       	ldi	r25, 0x1F	; 31
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_command+0x12>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_command+0x18>
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <lcd_init>:
}

// Inicializar LCD
void lcd_init(void) {
	// Configurar pines como salida
	DDRD |= 0xFF;  // Bits 7,6,5,4 del PORTD como salida (parte alta)
 234:	8a b1       	in	r24, 0x0a	; 10
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	8a b9       	out	0x0a, r24	; 10
	//DDRB |= 0x0F;  // Bits 3,2,1,0 del PORTB como salida (parte baja)
	LCD_CTRL_DDR |= (1 << LCD_RS) | (1 << LCD_E); // RS y E como salida
 23a:	87 b1       	in	r24, 0x07	; 7
 23c:	83 60       	ori	r24, 0x03	; 3
 23e:	87 b9       	out	0x07, r24	; 7
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	89 ef       	ldi	r24, 0xF9	; 249
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <lcd_init+0x12>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x1c>
 250:	00 00       	nop
	
	// Esperar estabilización de la alimentación
	_delay_ms(20);
	
	// Secuencia de inicialización por software (según datasheet HD44780)
	lcd_command(0x30);  // Function set: 8-bit
 252:	80 e3       	ldi	r24, 0x30	; 48
 254:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
 258:	8f e1       	ldi	r24, 0x1F	; 31
 25a:	9e e4       	ldi	r25, 0x4E	; 78
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x28>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x2e>
 262:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);  // Function set: 8-bit
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f e8       	ldi	r24, 0x8F	; 143
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x3a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_init+0x40>
 274:	00 00       	nop
	_delay_us(100);
	lcd_command(0x30);  // Function set: 8-bit
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	
	// Configuración final de la LCD
	lcd_command(LCD_FUNCTION_SET);   // 8-bit, 2 líneas, 5x7 dots
 27c:	88 e3       	ldi	r24, 0x38	; 56
 27e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	lcd_command(LCD_DISPLAY_OFF);    // Display off
 282:	88 e0       	ldi	r24, 0x08	; 8
 284:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	lcd_command(LCD_CLEAR);          // Clear display
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	lcd_command(LCD_ENTRY_MODE);     // Entry mode: incrementar cursor
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	lcd_command(LCD_DISPLAY_ON);     // Display on, cursor off
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
 29a:	08 95       	ret

0000029c <lcd_set_cursor>:
}

// Posicionar cursor
void lcd_set_cursor(uint8_t row, uint8_t col) {
	uint8_t address;
	if(row == 0) {
 29c:	81 11       	cpse	r24, r1
		address = 0x00 + col;  // Primera línea
		} else {
		address = 0x40 + col;  // Segunda línea
 29e:	60 5c       	subi	r22, 0xC0	; 192
	}
	lcd_command(LCD_SET_CURSOR | address);
 2a0:	86 2f       	mov	r24, r22
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
 2a8:	08 95       	ret

000002aa <lcd_clear>:
}

// Limpiar pantalla
void lcd_clear(void) {
	lcd_command(LCD_CLEAR);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9f e1       	ldi	r25, 0x1F	; 31
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_clear+0xa>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_clear+0x10>
 2ba:	00 00       	nop
 2bc:	08 95       	ret

000002be <lcd_data>:
	_delay_ms(2);                    // Tiempo de ejecución del comando
}

// Enviar dato a la LCD
void lcd_data(uint8_t data) {
	LCD_CTRL_PORT |= (1 << LCD_RS);  // RS = 1 para datos
 2be:	98 b1       	in	r25, 0x08	; 8
 2c0:	91 60       	ori	r25, 0x01	; 1
 2c2:	98 b9       	out	0x08, r25	; 8
	lcd_send_data(data);            // Colocar dato en puerto de datos
 2c4:	0e 94 09 01 	call	0x212	; 0x212 <lcd_send_data>
	lcd_pulse_enable();              // Generar pulso Enable
 2c8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_pulse_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	87 ec       	ldi	r24, 0xC7	; 199
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_data+0x12>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_data+0x18>
 2d6:	00 00       	nop
 2d8:	08 95       	ret

000002da <lcd_string>:
	lcd_command(LCD_ENTRY_MODE);     // Entry mode: incrementar cursor
	lcd_command(LCD_DISPLAY_ON);     // Display on, cursor off
}

// Mostrar cadena de caracteres
void lcd_string(char* str) {
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
	while(*str) {
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <lcd_string+0xe>
		lcd_data(*str++);
 2e2:	21 96       	adiw	r28, 0x01	; 1
 2e4:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_data>
	lcd_command(LCD_DISPLAY_ON);     // Display on, cursor off
}

// Mostrar cadena de caracteres
void lcd_string(char* str) {
	while(*str) {
 2e8:	88 81       	ld	r24, Y
 2ea:	81 11       	cpse	r24, r1
 2ec:	fa cf       	rjmp	.-12     	; 0x2e2 <lcd_string+0x8>
		lcd_data(*str++);
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <I2C_Reset_Bus>:
uint8_t datoRecibido = 0;
uint8_t contador = 0;  // Usamos uint8_t para coincidir con el esclavo
uint8_t adc = 1;

void I2C_Reset_Bus() {
	TWCR = 0; // Deshabilita el módulo I2C
 2f4:	ec eb       	ldi	r30, 0xBC	; 188
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	10 82       	st	Z, r1
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <I2C_Reset_Bus+0x8>
 300:	00 00       	nop
	_delay_us(10);
	TWCR = (1 << TWEN); // Reinicia el módulo
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	80 83       	st	Z, r24
 306:	08 95       	ret

00000308 <I2C_Read_Slave>:
}

uint8_t I2C_Read_Slave(uint8_t slave_address, uint8_t *data) {
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	8b 01       	movw	r16, r22
	uint8_t status = 0;
	uint8_t address_byte = (slave_address << 1) | 0x01;  // Modo lectura
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	c8 2f       	mov	r28, r24
 318:	c1 60       	ori	r28, 0x01	; 1

	I2C_Reset_Bus();  // Limpia el bus antes de iniciar
 31a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <I2C_Reset_Bus>
	
	I2C_Master_Start();
 31e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
	
	// Envía dirección + modo lectura
	status = I2C_Master_Write(address_byte);
 322:	8c 2f       	mov	r24, r28
 324:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	if(status != 1) {
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	21 f0       	breq	.+8      	; 0x334 <I2C_Read_Slave+0x2c>
		I2C_Master_Stop();
 32c:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
		return 0;  // Error al enviar dirección
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0d c0       	rjmp	.+26     	; 0x34e <I2C_Read_Slave+0x46>
	}
	
	// Lee el dato
	status = I2C_Master_Read(data, 1);  // Lee 1 byte con ACK
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	c8 01       	movw	r24, r16
 338:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Master_Read>
	if(status != 1) {
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	21 f0       	breq	.+8      	; 0x348 <I2C_Read_Slave+0x40>
		I2C_Master_Stop();
 340:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
		return 0;  // Error en lectura
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	03 c0       	rjmp	.+6      	; 0x34e <I2C_Read_Slave+0x46>
	}
	
	I2C_Master_Stop();
 348:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
	return 1;  // Éxito
 34c:	81 e0       	ldi	r24, 0x01	; 1
}
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <uint8_to_string>:

void uint8_to_string(uint8_t num, char* str) {
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	eb 01       	movw	r28, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 35c:	4a e0       	ldi	r20, 0x0A	; 10
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__itoa_ncheck>
	// Convertimos el número a string directamente
	itoa(num, str, 10);
	
	// Aseguramos que ocupe 3 caracteres (espacios para números <100)
	uint8_t len = 0;
 364:	80 e0       	ldi	r24, 0x00	; 0
	while(str[len] != '\0') len++;
 366:	01 c0       	rjmp	.+2      	; 0x36a <uint8_to_string+0x14>
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	fe 01       	movw	r30, r28
 36c:	e8 0f       	add	r30, r24
 36e:	f1 1d       	adc	r31, r1
 370:	90 81       	ld	r25, Z
 372:	91 11       	cpse	r25, r1
 374:	f9 cf       	rjmp	.-14     	; 0x368 <uint8_to_string+0x12>
 376:	06 c0       	rjmp	.+12     	; 0x384 <uint8_to_string+0x2e>
	
	while(len < 3) {
		str[len++] = ' ';
 378:	fe 01       	movw	r30, r28
 37a:	e8 0f       	add	r30, r24
 37c:	f1 1d       	adc	r31, r1
 37e:	90 e2       	ldi	r25, 0x20	; 32
 380:	90 83       	st	Z, r25
 382:	8f 5f       	subi	r24, 0xFF	; 255
	
	// Aseguramos que ocupe 3 caracteres (espacios para números <100)
	uint8_t len = 0;
	while(str[len] != '\0') len++;
	
	while(len < 3) {
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	c0 f3       	brcs	.-16     	; 0x378 <uint8_to_string+0x22>
		str[len++] = ' ';
	}
	str[len] = '\0';
 388:	c8 0f       	add	r28, r24
 38a:	d1 1d       	adc	r29, r1
 38c:	18 82       	st	Y, r1
}
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	08 95       	ret

00000394 <lcd_display_refresh>:

void lcd_display_refresh(void) {
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	2a 97       	sbiw	r28, 0x0a	; 10
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
	char buffer1[5] = {0};
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	9e 01       	movw	r18, r28
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	79 01       	movw	r14, r18
 3ba:	f9 01       	movw	r30, r18
 3bc:	28 2f       	mov	r18, r24
 3be:	11 92       	st	Z+, r1
 3c0:	2a 95       	dec	r18
 3c2:	e9 f7       	brne	.-6      	; 0x3be <lcd_display_refresh+0x2a>
	char buffer2[5] = {0};	
 3c4:	8e 01       	movw	r16, r28
 3c6:	0a 5f       	subi	r16, 0xFA	; 250
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	f8 01       	movw	r30, r16
 3cc:	11 92       	st	Z+, r1
 3ce:	8a 95       	dec	r24
 3d0:	e9 f7       	brne	.-6      	; 0x3cc <lcd_display_refresh+0x38>
	uint8_to_string(contador, buffer1);
 3d2:	b7 01       	movw	r22, r14
 3d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3d8:	0e 94 ab 01 	call	0x356	; 0x356 <uint8_to_string>
	uint8_to_string(adc, buffer2);
 3dc:	b8 01       	movw	r22, r16
 3de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e2:	0e 94 ab 01 	call	0x356	; 0x356 <uint8_to_string>
	
	lcd_set_cursor(1, 1);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_set_cursor>
	lcd_string(buffer1);
 3ee:	c7 01       	movw	r24, r14
 3f0:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_string>
	lcd_set_cursor(1, 8);
 3f4:	68 e0       	ldi	r22, 0x08	; 8
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_set_cursor>
	lcd_string(buffer2);
 3fc:	c8 01       	movw	r24, r16
 3fe:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_string>
}
 402:	2a 96       	adiw	r28, 0x0a	; 10
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	08 95       	ret

0000041c <main>:

int main(void) {
	DDRB |= (1<<DDB5);
 41c:	84 b1       	in	r24, 0x04	; 4
 41e:	80 62       	ori	r24, 0x20	; 32
 420:	84 b9       	out	0x04, r24	; 4
	I2C_Master_Init(100000, 1);
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	60 ea       	ldi	r22, 0xA0	; 160
 426:	76 e8       	ldi	r23, 0x86	; 134
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	lcd_init();
 430:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_init>
	lcd_clear();
 434:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_clear>
	lcd_set_cursor(0, 1);
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_set_cursor>
	lcd_string("S1:");
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_string>
	lcd_set_cursor(0, 8);
 448:	68 e0       	ldi	r22, 0x08	; 8
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_set_cursor>
	lcd_string("S2:");
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_string>
	lcd_display_refresh();
 458:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_display_refresh>
	
	while(1) {
		if(I2C_Read_Slave(SLAVE_ADDRESS1, &contador)) {
 45c:	6a e0       	ldi	r22, 0x0A	; 10
 45e:	71 e0       	ldi	r23, 0x01	; 1
 460:	80 e2       	ldi	r24, 0x20	; 32
 462:	0e 94 84 01 	call	0x308	; 0x308 <I2C_Read_Slave>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	89 ef       	ldi	r24, 0xF9	; 249
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <main+0x50>
 474:	00 c0       	rjmp	.+0      	; 0x476 <main+0x5a>
 476:	00 00       	nop
			// contador ahora tiene el valor leído
		}
		_delay_ms(20);
		// Lectura del segundo esclavo
		if(I2C_Read_Slave(SLAVE_ADDRESS2, &adc)) {
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	71 e0       	ldi	r23, 0x01	; 1
 47c:	80 e3       	ldi	r24, 0x30	; 48
 47e:	0e 94 84 01 	call	0x308	; 0x308 <I2C_Read_Slave>
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	89 ef       	ldi	r24, 0xF9	; 249
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <main+0x6c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <main+0x76>
 492:	00 00       	nop
			// potenciometro ahora tiene el valor leído
		}
		_delay_ms(20);
		lcd_display_refresh();
 494:	0e 94 ca 01 	call	0x394	; 0x394 <lcd_display_refresh>
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	89 ef       	ldi	r24, 0xF9	; 249
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <main+0x82>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <main+0x8c>
 4a8:	00 00       	nop
 4aa:	d8 cf       	rjmp	.-80     	; 0x45c <main+0x40>

000004ac <__udivmodsi4>:
 4ac:	a1 e2       	ldi	r26, 0x21	; 33
 4ae:	1a 2e       	mov	r1, r26
 4b0:	aa 1b       	sub	r26, r26
 4b2:	bb 1b       	sub	r27, r27
 4b4:	fd 01       	movw	r30, r26
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <__udivmodsi4_ep>

000004b8 <__udivmodsi4_loop>:
 4b8:	aa 1f       	adc	r26, r26
 4ba:	bb 1f       	adc	r27, r27
 4bc:	ee 1f       	adc	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	a2 17       	cp	r26, r18
 4c2:	b3 07       	cpc	r27, r19
 4c4:	e4 07       	cpc	r30, r20
 4c6:	f5 07       	cpc	r31, r21
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <__udivmodsi4_ep>
 4ca:	a2 1b       	sub	r26, r18
 4cc:	b3 0b       	sbc	r27, r19
 4ce:	e4 0b       	sbc	r30, r20
 4d0:	f5 0b       	sbc	r31, r21

000004d2 <__udivmodsi4_ep>:
 4d2:	66 1f       	adc	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a 94       	dec	r1
 4dc:	69 f7       	brne	.-38     	; 0x4b8 <__udivmodsi4_loop>
 4de:	60 95       	com	r22
 4e0:	70 95       	com	r23
 4e2:	80 95       	com	r24
 4e4:	90 95       	com	r25
 4e6:	9b 01       	movw	r18, r22
 4e8:	ac 01       	movw	r20, r24
 4ea:	bd 01       	movw	r22, r26
 4ec:	cf 01       	movw	r24, r30
 4ee:	08 95       	ret

000004f0 <__itoa_ncheck>:
 4f0:	bb 27       	eor	r27, r27
 4f2:	4a 30       	cpi	r20, 0x0A	; 10
 4f4:	31 f4       	brne	.+12     	; 0x502 <__itoa_ncheck+0x12>
 4f6:	99 23       	and	r25, r25
 4f8:	22 f4       	brpl	.+8      	; 0x502 <__itoa_ncheck+0x12>
 4fa:	bd e2       	ldi	r27, 0x2D	; 45
 4fc:	90 95       	com	r25
 4fe:	81 95       	neg	r24
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	0c 94 84 02 	jmp	0x508	; 0x508 <__utoa_common>

00000506 <__utoa_ncheck>:
 506:	bb 27       	eor	r27, r27

00000508 <__utoa_common>:
 508:	fb 01       	movw	r30, r22
 50a:	55 27       	eor	r21, r21
 50c:	aa 27       	eor	r26, r26
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	aa 1f       	adc	r26, r26
 514:	a4 17       	cp	r26, r20
 516:	10 f0       	brcs	.+4      	; 0x51c <__utoa_common+0x14>
 518:	a4 1b       	sub	r26, r20
 51a:	83 95       	inc	r24
 51c:	50 51       	subi	r21, 0x10	; 16
 51e:	b9 f7       	brne	.-18     	; 0x50e <__utoa_common+0x6>
 520:	a0 5d       	subi	r26, 0xD0	; 208
 522:	aa 33       	cpi	r26, 0x3A	; 58
 524:	08 f0       	brcs	.+2      	; 0x528 <__utoa_common+0x20>
 526:	a9 5d       	subi	r26, 0xD9	; 217
 528:	a1 93       	st	Z+, r26
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	79 f7       	brne	.-34     	; 0x50c <__utoa_common+0x4>
 52e:	b1 11       	cpse	r27, r1
 530:	b1 93       	st	Z+, r27
 532:	11 92       	st	Z+, r1
 534:	cb 01       	movw	r24, r22
 536:	0c 94 9d 02 	jmp	0x53a	; 0x53a <strrev>

0000053a <strrev>:
 53a:	dc 01       	movw	r26, r24
 53c:	fc 01       	movw	r30, r24
 53e:	67 2f       	mov	r22, r23
 540:	71 91       	ld	r23, Z+
 542:	77 23       	and	r23, r23
 544:	e1 f7       	brne	.-8      	; 0x53e <strrev+0x4>
 546:	32 97       	sbiw	r30, 0x02	; 2
 548:	04 c0       	rjmp	.+8      	; 0x552 <strrev+0x18>
 54a:	7c 91       	ld	r23, X
 54c:	6d 93       	st	X+, r22
 54e:	70 83       	st	Z, r23
 550:	62 91       	ld	r22, -Z
 552:	ae 17       	cp	r26, r30
 554:	bf 07       	cpc	r27, r31
 556:	c8 f3       	brcs	.-14     	; 0x54a <strrev+0x10>
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
